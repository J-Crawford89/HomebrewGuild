@model Models.SpellModels.SpellDetailView

@{
    ViewBag.Title = "Details";
}

<div class="pageTitle spellTitle">
    <h1>@Html.DisplayFor(model => model.Name)</h1>
    <h5>@@@Html.DisplayFor(model => model.Creator)</h5>
</div>

<div class="row justify-content-center">
    <div class="col-10 col-md-5">
        <div class="card displayCard">
            <div class="card-body">
                <h5 class="card-title">@Html.DisplayFor(model => model.School) @Html.DisplayFor(model => model.SpellLevel)</h5>
                <h6 class="card-subtitle"><strong>@Html.DisplayNameFor(model => model.Range):</strong> @Html.DisplayFor(model => model.Range)</h6>
                <h6 class="card-subtitle mt-1">
                    <strong>@Html.DisplayNameFor(model => model.Components):</strong>
                    @foreach (var component in Model.Components)
                    {
                        string componentString = component.ToString();
                        @componentString[0]
                    }
                </h6>
                @if (Model.MaterialComponent != null)
                {
                    <p class="card-subtitle displaySubtext mt-0">(@Html.DisplayFor(model => model.MaterialComponent))</p>
                }
                <h6 class="card-subtitle mt-1"><strong>@Html.DisplayNameFor(model => model.Duration):</strong> @Html.DisplayFor(model => model.Duration)</h6>
                @if (Model.RequiresConcentration)
                {
                    <p class="card-subtitle displaySubtext mt-0">(Concentration)</p>
                }
                <hr />
                <p class="card-text mt-1">@Html.DisplayFor(model => model.Description)</p>
            </div>
                <div class="card-footer">
                    <p class="displaySubtext"><strong>@Html.DisplayNameFor(model=>model.DateCreated): </strong>@Html.DisplayFor(model=>model.DateCreated)</p>
                    <p class="displaySubtext"><string>@Html.DisplayNameFor(model=>model.LastUpdated): </string>@Html.DisplayFor(model=>model.LastUpdated)</p>
                </div>
        </div>
    </div>
</div>

<div class="formButtons" align="center">
    <ul class="horizontalList">
        @if (User.Identity.IsAuthenticated && User.Identity.Name == Model.Creator || User.IsInRole("Admin"))
        {
            <li><button type="button" class="btn btn-cancel">@Html.ActionLink("Delete", "Delete", new { id = Model.Id }, new { onclick = "return confirm('Are you sure you want to delete this spell?')" })</button></li>
            <li><button type="button" class="btn btn-primary" style="width: 108px;">@Html.ActionLink("Back to List", "Index")</button></li>
            <li><button type="button" class="btn btn-primary" style="width:108px;">@Html.ActionLink("Edit", "Edit", new { id = Model.Id })</button></li>
        }
        else
        {
            <li><button type="button" class="btn btn-primary" style="width: 108px;">@Html.ActionLink("Back to List", "Index")</button></li>
        }
    </ul>
</div>
