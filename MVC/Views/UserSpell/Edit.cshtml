@model Models.SpellModels.SpellEdit

@{
    ViewBag.Title = "Edit";
}

<div class="pageTitle spellTitle">
    <h1>Edit: <i>@Html.DisplayFor(model => model.Name)</i></h1>
</div>


<div class="container">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="formStandardStart">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-row">
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-lg-2 offset-md-1 offset-sm-0 offset-1">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "Spell Name" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-1 offset-sm-0">
                    @Html.LabelFor(model => model.SpellLevel, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.SpellLevel, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "Spell Level" } })
                    @Html.ValidationMessageFor(model => model.SpellLevel, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-lg-2 offset-md-1 offset-sm-0 offset-1">
                    @Html.LabelFor(model => model.School, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EnumDropDownListFor(model => model.School, "Select School", new { @class = "form-control inputStandard" })
                    @Html.ValidationMessageFor(model => model.School, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-1 offset-sm-0">
                    @Html.LabelFor(model => model.CastingTime, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.CastingTime, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "Casting Time" } })
                    @Html.ValidationMessageFor(model => model.CastingTime, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-lg-2 offset-md-1 offset-sm-0 offset-1">
                    @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "Duration" } })
                    @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-1 offset-sm-0">
                    @Html.LabelFor(model => model.Range, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.Range, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "Range" } })
                    @Html.ValidationMessageFor(model => model.Range, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-lg-2 offset-md-1 offset-sm-0 offset-1">
                    <div class="row">
                        <div class="form-group col-10 offset-1 offset-sm-0 col-sm-6 col-lg-2">
                            @Html.LabelFor(model => model.IsRitual, htmlAttributes: new { @class = "labelStandard" })
                            <div class="checkbox">
                                @Html.EditorFor(model => model.IsRitual)
                                @Html.ValidationMessageFor(model => model.IsRitual, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group col-10 offset-1 offset-sm-0 col-sm-6 col-lg-4">
                            @Html.LabelFor(model => model.RequiresConcentration, htmlAttributes: new { @class = "labelStandard" })
                            <div class="checkbox">
                                @Html.EditorFor(model => model.RequiresConcentration)
                                @Html.ValidationMessageFor(model => model.RequiresConcentration, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group col-10 offset-1 offset-sm-0 col-sm-6 col-lg-4">
                            @Html.LabelFor(model => model.Components, htmlAttributes: new { @class = "labelStandard" })
                            <div class="checkbox">
                                @foreach (var component in Enum.GetNames(typeof(Data.Enums.SpellComponent)))
                                {
                                    <input type="checkbox" name="Components" value="@component" @if (Model.Components.Contains((Data.Enums.SpellComponent)Enum.Parse(typeof(Data.Enums.SpellComponent), component))) { <text> checked </text> } />
                                    @component[0]
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-1 offset-sm-0">
                    @Html.LabelFor(model => model.MaterialComponent, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.MaterialComponent, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "Material Component" } })
                    @Html.ValidationMessageFor(model => model.MaterialComponent, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-row">
                <div class="form-group col-10 offset-1 col-lg-8 offset-lg-2 col-sm-12 offset-sm-0 col-md-10 offset-md-1">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "sr-only" })
                    <textarea name="Description" class="form-control inputTextArea">@Model.Description</textarea>
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="formButtonsContainer row">
                <div class="col-11 col-lg-10 col-sm-12 col-md-11">
                    <div class="formButtons">
                        <ul class="horizontalList">
                            <li><button type="button" class="btn btn-cancel">@Html.ActionLink("Cancel", "Index", "UserSpell", new { onclick = "return confirm('Are you sure you would like to cancel changes and return?')" })</button></li>
                            <li><input type="submit" value="Update" class="btn btn-primary" /></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
