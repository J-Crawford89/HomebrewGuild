@model Models.SpellModels.SpellDetailView

@{
    ViewBag.Title = "Details";
}

<div class="pageTitle spellTitle">
    <h1>@Html.DisplayFor(model => model.Name)</h1>
    <h5>@@@Html.DisplayFor(model => model.Creator)</h5>
</div>

<div class="container-md">
    <div class="row">
        <div class="col-10 col-lg-8 offset-1 offset-lg-2">
            <div class="card displayCard">
                <div class="card-body">
                    <h5 class="card-title">@Html.DisplayFor(model => model.School) @Html.DisplayFor(model => model.SpellLevel)</h5>
                    <h6 class="card-subtitle"><strong>@Html.DisplayNameFor(model => model.Range):</strong> @Html.DisplayFor(model => model.Range)</h6>
                    <h6 class="card-subtitle mt-1">
                        <strong>@Html.DisplayNameFor(model => model.Components):</strong>
                        @foreach (var component in Model.Components)
                        {
                            string componentString = component.ToString();
                            @componentString[0]
                        }
                    </h6>
                    @if (Model.MaterialComponent != null)
                    {
                        <p class="card-subtitle displaySubtext mt-0">(@Html.DisplayFor(model => model.MaterialComponent))</p>
                    }
                    <h6 class="card-subtitle mt-1"><strong>@Html.DisplayNameFor(model => model.Duration):</strong> @Html.DisplayFor(model => model.Duration)</h6>
                    @if (Model.RequiresConcentration)
                    {
                        <p class="card-subtitle displaySubtext mt-0">(Concentration)</p>
                    }
                    <hr />
                    <p class="card-text mt-1">@Html.DisplayFor(model => model.Description)</p>
                </div>
                <div class="card-footer">
                    <p class="displaySubtext"><strong>@Html.DisplayNameFor(model => model.DateCreated): </strong>@Html.DisplayFor(model => model.DateCreated)</p>
                    <p class="displaySubtext"><strong>@Html.DisplayNameFor(model => model.LastUpdated): </strong>@Html.DisplayFor(model => model.LastUpdated)</p>
                </div>
            </div>
        </div>
    </div>

    <div class="formButtonsContainer row">
        <div class="col-11 col-lg-10">
            <ul class="horizontalList formButtons">
                @if (User.Identity.IsAuthenticated && User.Identity.Name == Model.Creator || User.IsInRole("Admin"))
                {
                    <li><button type="button" class="btn btn-cancel deleteItem" data-id="@Model.Id"><i class="far fa-trash-alt"></i></button></li>
                    <li><button type="button" class="btn btn-primary"><a href="/Spell/"><i class="far fa-list-alt"></i></a></button></li>
                    <li><button type="button" class="btn btn-primary"><a href="/UserSpell/Edit/@Model.Id"><i class="fas fa-edit"></i></a></button></li>
                }
                else
                {
                    <li><button type="button" class="btn btn-primary"><a href="/Spell/"><i class="far fa-list-alt"></i></a></button></li>
                }
            </ul>
        </div>
    </div>

    <hr />

    <div class="row">
        <div class="col-lg-8 offset-lg-2 col-10 offset-1">
            <h3 class="commentsTitle">Comments <i class="far fa-comment-dots"></i></h3>
        </div>
    </div>
    <div id="@string.Format("commentBlock" + Model.Id)" class="commentBlock col-lg-8 offset-lg-2 col-10 offset-1">
        @if (User.Identity.IsAuthenticated)
        {
            <div class="addCommentArea">
                <textarea id="@string.Format("comment" + Model.Id)" class="form-control commentTextArea" placeholder="Add a Comment ..."></textarea>

                <button type="button" class="btn btn-primary addComment" data-id="@Model.Id"><i class="far fa-comment"></i>  Add Comment</button>

            </div>
        }
        else
        {
            <div>
                <p>You must log in to leave a comment.</p>
            </div>
        }
    </div>
</div>


@section Scripts
    {
    <script type="text/javascript">

            $(document).ready(function loadComments() {
                var spellId = @Model.Id;
                var allCommentsArea = $('<div>').addClass('allComments' + spellId);

                //GET ALL COMMENTS
                $.ajax({

                    type: 'GET',
                    url: '@Url.Action("GetCommentsBySpellId", "Comment")',
                    data: { spellId },
                    success: function (response) {

                        if ($('div').hasClass('allComments' + spellId + '')) {
                            $('div[class=allComments' + spellId + ']').remove();
                        }

                        allCommentsArea.html(response);
                        allCommentsArea.prependTo('#commentBlock' + spellId);
                    },
                    error: function (response) {
                        alert('Sorry: Comments cannot be loaded.');
                    }
                });

                //ADD NEW COMMENT
                $('.addComment').on('click', function () {

                    var spellId = $(this).attr('data-id');
                    var commentContent = $('#comment' + spellId).val();

                    var model = {
                        Content: commentContent,
                        ParentId: spellId
                    };

                    $.ajax({

                        type: 'POST',
                        url: '@Url.Action("CreateSpellComment", "Comment")',
                        data: { model, spellId },
                        success: function (response) {

                            $('div[class=allComments' + spellId + ']').remove();

                            var allCommentsArea = $('<div>').addClass('allComments' + spellId);
                            allCommentsArea.html(response);

                            allCommentsArea.prependTo('#commentsBlock' + spellId);

                            $($('#comment' + spellId)).val('');
                            $(document).ready(loadComments);
                        },
                        error: function (response) {
                            alert('Unable to add comment');
                        }
                    });
                });

                // DELETE ITEM
                $('.deleteItem').on('click', function () {
                    var itemId = $(this).attr('data-id');
                    var message = confirm('Are you sure you wish to delete this item?');

                    if (message) {
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("Delete", "UserSpell")',
                            data: { itemId },
                            success: function () {
                                setTimeout(function () { location.reload(); }, 1000);
                            },
                            error: function () {
                                alert('Unable to delete item');
                            }
                        });
                    };
                });

            });
    </script>
}


