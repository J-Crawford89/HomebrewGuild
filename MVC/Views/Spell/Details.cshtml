@model Models.SpellModels.SpellDetailView

@{
    ViewBag.Title = "Details";
}

<div class="pageTitle spellTitle">
    <h1>@Html.DisplayFor(model => model.Name)</h1>
    <h5>@@@Html.DisplayFor(model => model.Creator)</h5>
</div>

<div class="row justify-content-center">
    <div class="col-10 col-md-5">
        <div class="card displayCard">
            <div class="card-body">
                <h5 class="card-title">@Html.DisplayFor(model => model.School) @Html.DisplayFor(model => model.SpellLevel)</h5>
                <h6 class="card-subtitle"><strong>@Html.DisplayNameFor(model => model.Range):</strong> @Html.DisplayFor(model => model.Range)</h6>
                <h6 class="card-subtitle mt-1">
                    <strong>@Html.DisplayNameFor(model => model.Components):</strong>
                    @foreach (var component in Model.Components)
                    {
                        string componentString = component.ToString();
                        @componentString[0]
                    }
                </h6>
                @if (Model.MaterialComponent != null)
                {
                    <p class="card-subtitle displaySubtext mt-0">(@Html.DisplayFor(model => model.MaterialComponent))</p>
                }
                <h6 class="card-subtitle mt-1"><strong>@Html.DisplayNameFor(model => model.Duration):</strong> @Html.DisplayFor(model => model.Duration)</h6>
                @if (Model.RequiresConcentration)
                {
                    <p class="card-subtitle displaySubtext mt-0">(Concentration)</p>
                }
                <hr />
                <p class="card-text mt-1">@Html.DisplayFor(model => model.Description)</p>
            </div>
            <div class="card-footer">
                <p class="displaySubtext"><strong>@Html.DisplayNameFor(model => model.DateCreated): </strong>@Html.DisplayFor(model => model.DateCreated)</p>
                <p class="displaySubtext"><string>@Html.DisplayNameFor(model => model.LastUpdated): </string>@Html.DisplayFor(model => model.LastUpdated)</p>
            </div>
        </div>
    </div>
</div>

<div class="formButtons" align="center">
    <ul class="horizontalList">
        @if (User.Identity.IsAuthenticated && User.Identity.Name == Model.Creator || User.IsInRole("Admin"))
        {
            <li><button type="button" class="btn btn-cancel">@Html.ActionLink("Delete", "Delete", "UserSpell", new { id = Model.Id }, new { onclick = "return confirm('Are you sure you want to delete this spell?')" })</button></li>
            <li><button type="button" class="btn btn-primary" style="width: 108px;">@Html.ActionLink("Back to List", "Index")</button></li>
            <li><button type="button" class="btn btn-primary" style="width:108px;">@Html.ActionLink("Edit", "Edit", "UserSpell", new { id = Model.Id }, "")</button></li>
        }
        else
        {
            <li><button type="button" class="btn btn-primary" style="width: 108px;">@Html.ActionLink("Back to List", "Index")</button></li>
        }
    </ul>
</div>

<hr />

<div class="row">
    <div class="col-8 offset-2">
        <h3 class="commentsTitle">Comments <i class="far fa-comment-dots"></i></h3>
    </div>
</div>
<div id="@string.Format("commentBlock" + Model.Id)" class="commentBlock col-md-8 offset-md-2">
    @if (User.Identity.IsAuthenticated)
    {
        <div class="addCommentArea">
            <textarea id="@string.Format("comment" + Model.Id)" class="form-control commentTextArea" placeholder="Add a Comment ..."></textarea>

            <button type="button" class="btn btn-primary addComment" data-id="@Model.Id"><i class="far fa-comment"></i>  Add Comment</button>

        </div>
    }
    else
    {
        <div>
            <p>You must log in to leave a comment.</p>
        </div>
    }
</div>



@section Scripts
    {
    <script type="text/javascript">

            $(document).ready(function loadComments() {
                var spellId = @Model.Id;
                var allCommentsArea = $('<div>').addClass('allComments' + spellId);

                //GET ALL COMMENTS
                $.ajax({

                    type: 'GET',
                    url: '@Url.Action("GetCommentsBySpellId", "Comment")',
                    data: { spellId },
                    success: function (response) {

                        if ($('div').hasClass('allComments' + spellId + '')) {
                            $('div[class=allComments' + spellId + ']').remove();
                        }

                        allCommentsArea.html(response);
                        allCommentsArea.prependTo('#commentBlock' + spellId);
                    },
                    error: function (response) {
                        alert('Sorry: Comments cannot be loaded.');
                    }
                });

                //ADD NEW COMMENT
                $('.addComment').on('click', function () {

                    var spellId = $(this).attr('data-id');
                    var commentContent = $('#comment' + spellId).val();

                    var model = {
                        Content: commentContent,
                        ParentId: spellId
                    };

                    $.ajax({

                        type: 'POST',
                        url: '@Url.Action("CreateSpellComment", "Comment")',
                        data: { model, spellId },
                        success: function (response) {

                            $('div[class=allComments' + spellId + ']').remove();

                            var allCommentsArea = $('<div>').addClass('allComments' + spellId);
                            allCommentsArea.html(response);

                            allCommentsArea.prependTo('#commentsBlock' + spellId);

                            $($('#comment' + spellId)).val('');
                            $(document).ready(loadComments);
                        },
                        error: function (response) {
                            alert('Unable to add comment');
                        }
                    });
                });
            });
    </script>
}


