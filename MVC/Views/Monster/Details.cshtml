@model Models.MonsterModels.MonsterDetailView

@{
    ViewBag.Title = "Details";
}

<div class="pageTitle monsterTitle">
    <h1>@Html.DisplayFor(model => model.Name)</h1>
    <h5>@@@Html.DisplayFor(model => model.Creator)</h5>
</div>

<div class="container-md">
    <div class="row">
        <div class="col-10 col-lg-8 offset-1 offset-lg-2">
            <div class="card displayCard">
                <div class="card-body">
                    <h6>
                        <i>
                            @Html.DisplayFor(model => model.Size)
                            @Html.DisplayFor(model => model.Type),
                            @Html.DisplayFor(model => model.Alignment)
                        </i>
                    </h6>
                    <hr />
                    <h6>
                        <strong>
                            @Html.DisplayNameFor(model => model.ArmorClass):
                        </strong>
                        @Html.DisplayFor(model => model.ArmorClass)
                        (@Html.DisplayFor(model => model.ArmorType))
                    </h6>
                    <h6>
                        <strong>
                            @Html.DisplayNameFor(model => model.HitPoints):
                        </strong>
                        @Html.DisplayFor(model => model.HitPoints)
                        (@Html.DisplayFor(model => model.HitPointEquation))
                    </h6>
                    <h6><strong>@Html.DisplayNameFor(model => model.Speed): </strong>@Html.DisplayFor(model => model.Speed)</h6>
                    <hr />
                    <h6>
                        <strong>STR: </strong>@Html.DisplayFor(model => model.Strength) |
                        <strong>DEX: </strong>@Html.DisplayFor(model => model.Dexterity) |
                        <strong>CON: </strong>@Html.DisplayFor(model => model.Constitution) |
                        <strong>INT: </strong>@Html.DisplayFor(model => model.Intelligence) |
                        <strong>WIS: </strong>@Html.DisplayFor(model => model.Wisdom) |
                        <strong>CHA: </strong>@Html.DisplayFor(model => model.Charisma)
                    </h6>
                    <hr />
                    @if (!string.IsNullOrWhiteSpace(Model.SavingThrows))
                    {
                        <h6><strong>@Html.DisplayNameFor(model => model.SavingThrows): </strong>@Html.DisplayFor(model => model.SavingThrows)</h6>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Skills))
                    {
                        <h6><strong>@Html.DisplayNameFor(mode => Model.Skills): </strong>@Html.DisplayFor(model => model.Skills)</h6>
                    }
                    @if (Model.Vulnerabilities != null)
                    {
                        <h6><strong>@Html.DisplayNameFor(model => model.Vulnerabilities): </strong>@Html.DisplayFor(model => model.Vulnerabilities)</h6>
                    }
                    @if (Model.Resistances != null)
                    {
                        <h6><strong>@Html.DisplayNameFor(model => model.Resistances): </strong>@Html.DisplayFor(model => model.Resistances)</h6>
                    }
                    @if (Model.Immunities != null)
                    {
                        <h6><strong>@Html.DisplayNameFor(model => model.Immunities): </strong>@Html.DisplayFor(model => model.Immunities)</h6>
                    }
                    <h6><strong>@Html.DisplayNameFor(model => model.Senses): </strong>@Html.DisplayFor(model => model.Senses)</h6>
                    <h6><strong>@Html.DisplayNameFor(model => model.Languages): </strong>@Html.DisplayFor(model => model.Languages)</h6>
                    <h6><strong>@Html.DisplayNameFor(model => model.ChallengeRating): </strong>@Html.DisplayFor(model => model.ChallengeRating)</h6>
                    <hr />

                    @if (Model.Traits != null)
                    {
                        foreach (var kvp in Model.Traits)
                        {
                            <p><strong><i>@kvp.Key</i>. </strong>@kvp.Value</p>
                        }
                    }

                    @if (Model.Actions != null)
                    {
                        <h5 class="card-title">@Html.DisplayNameFor(model => model.Actions)</h5>
                        <hr />
                        foreach (var kvp in Model.Actions)
                        {
                            <p><strong><i>@kvp.Key</i>. </strong>@kvp.Value</p>
                        }
                    }

                    @if (Model.Reactions != null)
                    {
                        <h5 class="card-title">@Html.DisplayNameFor(model => model.Reactions)</h5>
                        <hr />
                        foreach (var kvp in Model.Reactions)
                        {
                            <p><strong><i>@kvp.Key</i>. </strong>@kvp.Value</p>
                        }
                    }

                    @if (Model.LegendaryActions != null)
                    {
                        <h5 class="card-title">@Html.DisplayNameFor(model => model.LegendaryActions)</h5>
                        <hr />
                        <p>
                            The @Model.Name can take @Model.NumberOfLegendaryActions legendary actions, choosing from the options below.
                            Only one legendary action option can be used at a time and only at the end of another creature's turn. The
                            @Model.Name regains spent legendary actions at the start of its turn.
                        </p>
                        foreach (var kvp in Model.LegendaryActions)
                        {
                            <p><strong><i>@kvp.Key</i>. </strong>@kvp.Value</p>
                        }
                    }

                    @if (Model.LairActions != null)
                    {
                        <h5 class="card-title">@Html.DisplayNameFor(model => model.LairActions)</h5>
                        <hr />
                        <p>
                            On initiative count 20 (losing initiative ties), the @Model.Name takes a lair action to cause one of the
                            following effects; the @Model.Name can't use the same effect two rounds in a row:
                        </p>
                        foreach (var kvp in Model.LairActions)
                        {
                            <p><strong><i>@kvp.Key</i>. </strong>@kvp.Value</p>
                        }
                    }
                </div>
                <div>
                    <div class="card-footer">
                        <p class="displaySubtext"><strong>@Html.DisplayNameFor(model => model.DateCreated): </strong>@Html.DisplayFor(model => model.DateCreated)</p>
                        <p class="displaySubtext"><strong>@Html.DisplayNameFor(model => model.LastUpdated): </strong>@Html.DisplayFor(model => model.LastUpdated)</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="formButtonsContainer row">
        <div class="col-11 col-lg-10">
            <ul class="horizontalList formButtons">
                @if (User.Identity.IsAuthenticated && User.Identity.Name == Model.Creator || User.IsInRole("Admin"))
                {
                    <li><button type="button" class="btn btn-cancel deleteItem" data-id="@Model.Id"><i class="far fa-trash-alt"></i></button></li>
                    <li><button type="button" class="btn btn-primary"><a href="/Monster/"><i class="far fa-list-alt"></i></a></button></li>
                    <li><button type="button" class="btn btn-primary"><a href="/UserMonster/Edit/@Model.Id"><i class="fas fa-edit"></i></a></button></li>
                }
                else
                {
                    <li><button type="button" class="btn btn-primary"><a href="/Monster/"><i class="far fa-list-alt"></i></a></button></li>
                }
            </ul>
        </div>
    </div>

    <hr />

    <div class="row">
        <div class="col-lg-8 offset-lg-2 col-10 offset-1">
            <h3 class="commentsTitle">Comments <i class="far fa-comment-dots"></i></h3>
        </div>
    </div>
    <div id="@string.Format("commentBlock" + Model.Id)" class="commentBlock col-lg-8 offset-lg-2 col-10 offset-1">
        @if (User.Identity.IsAuthenticated)
        {
            <div class="addCommentArea">
                <textarea id="@string.Format("comment" + Model.Id)" class="form-control commentTextArea" placeholder="Add a Comment ..."></textarea>
                <button type="button" class="btn btn-primary addComment" data-id="@Model.Id"><i class="far fa-comment"></i>  Add Comment</button>

            </div>
        }
        else
        {
            <div>
                <p>You must log in to leave a comment.</p>
            </div>
        }
    </div>
</div>


    @section Scripts
    {
        <script type="text/javascript">

            $(document).ready(function loadComments() {
                var monsterId = @Model.Id;
                var allCommentsArea = $('<div>').addClass('allComments' + monsterId);

                //GET ALL COMMENTS
                $.ajax({

                    type: 'GET',
                    url: '@Url.Action("GetCommentsByMonsterId", "Comment")',
                    data: { monsterId },
                    success: function (response) {

                        if ($('div').hasClass('allComments' + monsterId + '')) {
                            $('div[class=allComments' + monsterId + ']').remove();
                        }

                        allCommentsArea.html(response);
                        allCommentsArea.prependTo('#commentBlock' + monsterId);
                    },
                    error: function (response) {
                        alert('Sorry: Comments cannot be loaded.');
                    }
                });

                //ADD NEW COMMENT
                $('.addComment').on('click', function () {

                    var monsterId = $(this).attr('data-id');
                    var commentContent = $('#comment' + monsterId).val();

                    var model = {
                        Content: commentContent,
                        ParentId: monsterId
                    };

                    $.ajax({

                        type: 'POST',
                        url: '@Url.Action("CreateMonsterComment", "Comment")',
                        data: { model, monsterId },
                        success: function (response) {

                            $('div[class=allComments' + monsterId + ']').remove();

                            var allCommentsArea = $('<div>').addClass('allComments' + monsterId);
                            allCommentsArea.html(response);

                            allCommentsArea.prependTo('#commentsBlock' + monsterId);

                            $($('#comment' + monsterId)).val('');
                            $(document).ready(loadComments);
                        },
                        error: function (response) {
                            alert('Unable to add comment');
                        }
                    });
                });

                // DELETE ITEM
                $('.deleteItem').on('click', function () {
                    var itemId = $(this).attr('data-id');
                    var message = confirm('Are you sure you wish to delete this item?');

                    if (message) {
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("Delete", "UserMonster")',
                            data: { itemId },
                            success: function () {
                                history.back();
                            },
                            error: function () {
                                alert('Unable to delete item');
                            }
                        });
                    };
                });
            });
        </script>
    }

