@model Models.MonsterModels.MonsterEdit

@{
    ViewBag.Title = "Edit";
}

<div class="pageTitle monsterTitle">
    <h1>Edit: <i>@Html.DisplayFor(model => model.Name)</i></h1>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-row justify-content-center">
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "sr-only" })
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control inputLarge" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-row justify-content-center">
            <div class="form-group col-sm-4">
                @Html.LabelFor(model => model.Size, htmlAttributes: new { @class = "labelStandard" })
                @Html.EnumDropDownListFor(model => model.Size, "Select Size", new { @class = "form-control inputStandard" })
                @Html.ValidationMessageFor(model => model.Size, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-sm-4">
                @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "labelStandard" })
                @Html.EnumDropDownListFor(model => model.Type, "Select Type", new { @class = "form-control inputStandard" })
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-row justify-content-center">
            <div class="form-group col-sm-4">
                @Html.LabelFor(model => model.Alignment, htmlAttributes: new { @class = "labelStandard" })
                @Html.EnumDropDownListFor(model => model.Alignment, "Select Alignment", new { @class = "form-control inputStandard" })
                @Html.ValidationMessageFor(model => model.Alignment, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-sm-4">
                @Html.LabelFor(model => model.ArmorClass, htmlAttributes: new { @class = "labelStandard" })
                @Html.EditorFor(model => model.ArmorClass, new { htmlAttributes = new { @class = "form-control inputStandard" } })
                @Html.ValidationMessageFor(model => model.ArmorClass, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-row justify-content-center">
            <div class="form-group col-sm-4">
                @Html.LabelFor(model => model.ArmorType, htmlAttributes: new { @class = "labelStandard" })
                @Html.EditorFor(model => model.ArmorType, new { htmlAttributes = new { @class = "form-control inputStandard" } })
                @Html.ValidationMessageFor(model => model.ArmorType, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-sm-4">
                @Html.LabelFor(model => model.HitPoints, htmlAttributes: new { @class = "labelStandard" })
                @Html.EditorFor(model => model.HitPoints, new { htmlAttributes = new { @class = "form-control inputStandard" } })
                @Html.ValidationMessageFor(model => model.HitPoints, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-row justify-content-center">
            <div class="form-group col-sm-4">
                @Html.LabelFor(model => model.HitPointEquation, htmlAttributes: new { @class = "labelStandard" })
                @Html.EditorFor(model => model.HitPointEquation, new { htmlAttributes = new { @class = "form-control inputStandard" } })
                @Html.ValidationMessageFor(model => model.HitPointEquation, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-sm-4">
                @Html.LabelFor(model => model.Speed, htmlAttributes: new { @class = "labelStandard" })
                @Html.EditorFor(model => model.Speed, new { htmlAttributes = new { @class = "form-control inputStandard" } })
                @Html.ValidationMessageFor(model => model.Speed, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-row justify-content-center">
            <div class="form-group col-sm-2">
                @Html.LabelFor(model => model.Strength, htmlAttributes: new { @class = "labelStandard" })
                @Html.EditorFor(model => model.Strength, new { htmlAttributes = new { @class = "form-control inputSmall" } })
                @Html.ValidationMessageFor(model => model.Strength, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-sm-2">
                @Html.LabelFor(model => model.Dexterity, htmlAttributes: new { @class = "labelStandard" })
                @Html.EditorFor(model => model.Dexterity, new { htmlAttributes = new { @class = "form-control inputSmall" } })
                @Html.ValidationMessageFor(model => model.Dexterity, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-sm-2">
                @Html.LabelFor(model => model.Constitution, htmlAttributes: new { @class = "labelStandard" })
                @Html.EditorFor(model => model.Constitution, new { htmlAttributes = new { @class = "form-control inputSmall" } })
                @Html.ValidationMessageFor(model => model.Constitution, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-row justify-content-center">
            <div class="form-group col-sm-2">
                @Html.LabelFor(model => model.Intelligence, htmlAttributes: new { @class = "labelStandard" })
                @Html.EditorFor(model => model.Intelligence, new { htmlAttributes = new { @class = "form-control inputSmall" } })
                @Html.ValidationMessageFor(model => model.Intelligence, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-sm-2">
                @Html.LabelFor(model => model.Wisdom, htmlAttributes: new { @class = "labelStandard" })
                @Html.EditorFor(model => model.Wisdom, new { htmlAttributes = new { @class = "form-control inputSmall" } })
                @Html.ValidationMessageFor(model => model.Wisdom, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-sm-2">
                @Html.LabelFor(model => model.Charisma, htmlAttributes: new { @class = "labelStandard" })
                @Html.EditorFor(model => model.Charisma, new { htmlAttributes = new { @class = "form-control inputSmall" } })
                @Html.ValidationMessageFor(model => model.Charisma, "", new { @class = "text-danger" })
            </div>
        </div>

        <!--SAVING THROWS - Dictionary<Ability, string> -->
        <div class="form-row justify-content-center tableForm">
            <div class="form-group">
                <h5>@Html.LabelFor(model => model.SavingThrows, htmlAttributes: new { @class = "tableHeader" })</h5>
                <table class="checkbox table">
                    <thead>
                        <tr>
                            <th>Ability</th>
                            <th>Bonus</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            foreach (var ability in Enum.GetNames(typeof(Data.Enums.Ability)))
                            {
                                var kvp = new KeyValuePair<Data.Enums.Ability, string>();
                                Guid index = Guid.NewGuid();
                                <tr>
                                    <td>
                                        <input type="checkbox" name="SavingThrows[@index].Key" value="@ability"
                                               @if (Model.SavingThrows.ContainsKey((Data.Enums.Ability)Enum.Parse(typeof(Data.Enums.Ability), ability))) { <text> checked </text> } />
                                    </td>
                                    <td>@ability</td>
                                    <td>
                                        <input type="text" name="SavingThrows[@index].Value"
                                               @if (Model.SavingThrows.ContainsKey((Data.Enums.Ability)Enum.Parse(typeof(Data.Enums.Ability), ability))) { kvp = Model.SavingThrows.Single(e => e.Key == (Data.Enums.Ability)Enum.Parse(typeof(Data.Enums.Ability), ability)); } value="@kvp.Value" />
                                    </td>
                                    <td><input type="hidden" name="SavingThrows.Index" value="@index" /></td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!--SKILLS - Dictionary<Skill, string> -->
        <div class="form-row justify-content-center">
            <div class="form-group">
                <h5>@Html.LabelFor(model => model.SavingThrows, htmlAttributes: new { @class = "tableHeader" })</h5>
                <table class="checkbox table">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Skill</th>
                            <th>Bonus</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            foreach (Data.Enums.Skill skill in (Data.Enums.Skill[])Enum.GetValues(typeof(Data.Enums.Skill)))
                            {
                                var kvp = new KeyValuePair<Data.Enums.Skill, string>();
                                var enumService = new Services.EnumService();
                                Guid index = Guid.NewGuid();
                                <tr>
                                    <td>
                                        <input type="checkbox" name="Skills[@index].Key" value="@skill.ToString()"
                                               @if (Model.Skills.ContainsKey((Data.Enums.Skill)Enum.Parse(typeof(Data.Enums.Skill), skill.ToString()))) { <text> checked </text> } />
                                    </td>
                                    <td>@enumService.ConvertSkill(skill)</td>
                                    <td>
                                        <input type="text" name="Skills[@index].Value"
                                               @if (Model.Skills.ContainsKey((Data.Enums.Skill)Enum.Parse(typeof(Data.Enums.Skill), skill.ToString()))) { kvp = Model.Skills.Single(e => e.Key == (Data.Enums.Skill)Enum.Parse(typeof(Data.Enums.Skill), skill.ToString())); } value="@kvp.Value" />
                                    </td>
                                    <td><input type="hidden" name="Skills.Index" value="@index" /></td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="form-row justify-content-center">
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Vulnerabilities, htmlAttributes: new { @class = "labelStandard" })
                @Html.EditorFor(model => model.Vulnerabilities, new { htmlAttributes = new { @class = "form-control inputStandard" } })
                @Html.ValidationMessageFor(model => model.Vulnerabilities, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Resistances, htmlAttributes: new { @class = "labelStandard" })
                @Html.EditorFor(model => model.Resistances, new { htmlAttributes = new { @class = "form-control inputStandard" } })
                @Html.ValidationMessageFor(model => model.Resistances, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-row justify-content-center">
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Immunities, htmlAttributes: new { @class = "labelStandard" })
                @Html.EditorFor(model => model.Immunities, new { htmlAttributes = new { @class = "form-control inputStandard" } })
                @Html.ValidationMessageFor(model => model.Immunities, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Senses, htmlAttributes: new { @class = "labelStandard" })
                @Html.EditorFor(model => model.Senses, new { htmlAttributes = new { @class = "form-control inputStandard" } })
                @Html.ValidationMessageFor(model => model.Senses, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-row justify-content-center">
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Languages, htmlAttributes: new { @class = "labelStandard" })
                @Html.EditorFor(model => model.Languages, new { htmlAttributes = new { @class = "form-control inputStandard" } })
                @Html.ValidationMessageFor(model => model.Languages, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.ChallengeRating, htmlAttributes: new { @class = "labelStandard" })
                @Html.EditorFor(model => model.ChallengeRating, new { htmlAttributes = new { @class = "form-control inputStandard" } })
                @Html.ValidationMessageFor(model => model.ChallengeRating, "", new { @class = "text-danger" })
            </div>
        </div>

        <!--TRAITS-->
        <div class="form-row justify-content-center tableForm">
            <div class="form-group">
                <h5>Traits</h5>
                <table class="table" id="traitTable">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Traits != null)
                        {
                            int i = -1;
                            foreach (var kvp in Model.Traits)
                            {
                                i++;
                                <tr class="traitRow">
                                    <td><input type="text" name="Traits[@i].Key" class="form-control key01" value="@kvp.Key" /></td>
                                    <td><textarea name="Traits[@i].Value" class="form-control tableTextArea value01">@kvp.Value</textarea></td>
                                    <td><button type="button" id="btnDelete" class="deleteTrait btn btn btn-danger btn-xs">Delete Row</button></td>
                                    <td><input type="hidden" name="Traits.Index" value="@i" /></td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr class="traitRow">
                                <td><input type="text" name="Traits[0].Key" class="form-control key01" /></td>
                                <td><textarea name="Traits[0].Value" class="form-control tableTextArea value01"></textarea></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="form-row">
            <button type="button" id="btnAdd" class="offset-sm-10 btn btn-xs btn-primary addTrait">Add Trait</button>
        </div>

        <!--ACTIONS-->
        <div class="form-row justify-content-center tableForm">
            <div class="form-group">
                <h5>Actions</h5>
                <table class="table" id="actionTable">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Actions != null)
                        {
                            int i = -1;
                            foreach (var kvp in Model.Actions)
                            {
                                i++;
                                <tr class="actionRow">
                                    <td><input type="text" name="Actions[@i].Key" class="form-control key01" value="@kvp.Key" /></td>
                                    <td><textarea name="Actions[@i].Value" class="form-control tableTextArea value01">@kvp.Value</textarea></td>
                                    <td><button type="button" id="btnDelete" class="deleteAction btn btn btn-danger btn-xs">Delete Row</button></td>
                                    <td><input type="hidden" name="Actions.Index" value="@i" /></td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr class="actionRow">
                                <td><input type="text" name="Actions[0].Key" class="form-control key01" /></td>
                                <td><textarea name="Actions[0].Value" class="form-control tableTextArea value01"></textarea></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="form-row">
            <button type="button" id="btnAdd" class="offset-sm-10 btn btn-xs btn-primary addAction">Add Action</button>
        </div>

        <!--REACTIONS-->
        <div class="form-row justify-content-center tableForm">
            <div class="form-group">
                <h5>Reactions</h5>
                <table class="table" id="reactionTable">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Reactions != null)
                        {
                            int i = -1;
                            foreach (var kvp in Model.Reactions)
                            {
                                i++;
                                <tr class="reactionRow">
                                    <td><input type="text" name="Reactions[@i].Key" class="form-control key01" value="@kvp.Key" /></td>
                                    <td><textarea name="Reactions[@i].Value" class="form-control tableTextArea value01">@kvp.Value</textarea></td>
                                    <td><button type="button" id="btnDelete" class="deleteReaction btn btn btn-danger btn-xs">Delete Row</button></td>
                                    <td><input type="hidden" name="Reactions.Index" value="@i" /></td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr class="reactionRow">
                                <td><input type="text" name="Reactions[0].Key" class="form-control key01" /></td>
                                <td><textarea name="Reactions[0].Value" class="form-control tableTextArea value01"></textarea></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="form-row">
            <button type="button" id="btnAdd" class="offset-sm-10 btn btn-xs btn-primary addReaction">Add Reaction</button>
        </div>

        <!--LEGENDARY-->
        <div class="form-row justify-content-center tableForm">
            <div class="form-group">
                @Html.EditorFor(model => model.NumberOfLegendaryActions, new { htmlAttributes = new { @class = "form-control float-right", @id = "legendaryActions", @placeholder = "#/Round" } })
                @Html.ValidationMessageFor(model => model.NumberOfLegendaryActions, "", new { @class = "text-danger" })
                <h5>Legendary Actions</h5>
                <table class="table" id="legendaryTable">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.LegendaryActions != null)
                        {
                            int i = -1;
                            foreach (var kvp in Model.LegendaryActions)
                            {
                                i++;
                                <tr class="legendaryRow">
                                    <td><input type="text" name="LegendaryActions[@i].Key" class="form-control key01" value="@kvp.Key" /></td>
                                    <td><textarea name="LegendaryActions[@i].Value" class="form-control tableTextArea value01">@kvp.Value</textarea></td>
                                    <td><button type="button" id="btnDelete" class="deleteLegendary btn btn btn-danger btn-xs">Delete Row</button></td>
                                    <td><input type="hidden" name="LegendaryActions.Index" value="@i" /></td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr class="legendaryRow">
                                <td><input type="text" name="LegendaryActions[0].Key" class="form-control key01" /></td>
                                <td><textarea name="LegendaryActions[0].Value" class="form-control tableTextArea value01"></textarea></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="form-row">
            <button type="button" id="btnAdd" class="offset-sm-10 btn btn-xs btn-primary addLegendary">Add Legendary Action</button>
        </div>

        <!--LAIR-->
        <div class="form-row justify-content-center tableForm">
            <div class="form-group">
                @Html.LabelFor(model => model.LairActions, htmlAttributes: new { @class = "control-label col-md-2" })
                <table class="table" id="lairTable">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.LairActions != null)
                        {
                            int i = -1;
                            foreach (var kvp in Model.LairActions)
                            {
                                i++;
                                <tr class="lairRow">
                                    <td><input type="text" name="LairActions[0].Key" class="form-control key01" value="@kvp.Key" /></td>
                                    <td><textarea name="LairActions[@i].Value" class="form-control tableTextArea value01">@kvp.Value</textarea></td>
                                    <td><button type="button" id="btnDelete" class="deleteLair btn btn btn-danger btn-xs">Delete Row</button></td>
                                    <td><input type="hidden" name="LairActons.Index" value="@i" /></td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr class="lairRow">
                                <td><input type="text" name="LairActions[0].Key" class="form-control key01" /></td>
                                <td><textarea name="LairActions[0].Value" class="form-control tableTextArea value01"></textarea></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="form-row">
            <button type="button" id="btnAdd" class="offset-sm-10 btn btn-xs btn-primary addLair">Add Lair Action</button>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
        <div class="formButtons" align="center">
            <ul class="horizontalList">
                <li><button type="button" class="btn btn-cancel">@Html.ActionLink("Cancel", "Index", "UserMonster", new { onclick = "return confirm('Are you sure you would like to cancel changes and return?')" })</button></li>
                <li><input type="submit" value="Update" class="btn btn-primary" /></li>
            </ul>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(document).ready(function () {
            $(document).on("click", ".addTrait", function () {
                var rowCount = $('.traitRow').length;
                var traitTable = '<tr class="traitRow">' + '<td><input type="text" name="Traits[' + rowCount + '].Key" class="form-control key01" /></td>' +
                    '<td><textarea name="Traits[' + rowCount + '].Value" class="form-control tableTextArea value01"></textarea></td>' +
                    '<td><button type="button" id="btnDelete" class="deleteTrait btn btn btn-danger btn-xs">Remove</button></td>' +
                    '<td><input type="hidden" name="Traits.Index" value="' + rowCount + '" /><td>' + '</tr>';
                $('#traitTable').append(traitTable);
            });
            $(document).on("click", ".deleteTrait", function () {
                $(this).closest("tr").remove();
            });
            $(document).on("click", ".addAction", function () {
                var rowCount = $('.actionRow').length;
                var actionTable = '<tr class="actionRow">' + '<td><input type="text" name="Actions[' + rowCount + '].Key" class="form-control key01" /></td>' +
                    '<td><textarea name="Actions[' + rowCount + '].Value" class="form-control tableTextArea value01"></textarea></td>' +
                    '<td><button type="button" id="btnDelete" class="deleteAction btn btn btn-danger btn-xs">Remove</button></td>' +
                    '<td><input type="hidden" name="Actions.Index" value="' + rowCount + '" /><td>' + '</tr>';
                $('#actionTable').append(actionTable);
            });
            $(document).on("click", ".deleteAction", function () {
                $(this).closest("tr").remove();
            });
            $(document).on("click", ".addReaction", function () {
                var rowCount = $('.reactionRow').length;
                var reactionTable = '<tr class="reactionRow">' + '<td><input type="text" name="Reactions[' + rowCount + '].Key" class="form-control key01" /></td>' +
                    '<td><textarea name="Reactions[' + rowCount + '].Value" class="form-control tableTextArea value01"></textarea></td>' +
                    '<td><button type="button" id="btnDelete" class="deleteReaction btn btn btn-danger btn-xs">Remove</button></td>' +
                    '<td><input type="hidden" name="Reactions.Index" value="' + rowCount + '" /><td>' + '</tr>';
                $('#reactionTable').append(reactionTable);
            });
            $(document).on("click", ".deleteReaction", function () {
                $(this).closest("tr").remove();
            });
            $(document).on("click", ".addLegendary", function () {
                var rowCount = $('.legendaryRow').length;
                var legendaryTable = '<tr class="legendaryRow">' + '<td><input type="text" name="LegendaryActions[' + rowCount + '].Key" class="form-control key01" /></td>' +
                    '<td><textarea name="LegendaryActions[' + rowCount + '].Value" class="form-control tableTextArea value01"></textarea></td>' +
                    '<td><button type="button" id="btnDelete" class="deleteLegendary btn btn btn-danger btn-xs">Remove</button></td>' +
                    '<td><input type="hidden" name="LegendaryActions.Index" value="' + rowCount + '" /><td>' + '</tr>';
                $('#legendaryTable').append(legendaryTable);
            });
            $(document).on("click", ".deleteLegendary", function () {
                $(this).closest("tr").remove();
            });
            $(document).on("click", ".addLair", function () {
                var rowCount = $('.lairRow').length;
                var lairTable = '<tr class="lairRow">' + '<td><input type="text" name="LairActions[' + rowCount + '].Key" class="form-control key01" /></td>' +
                    '<td><textarea name="LairActions[' + rowCount + '].Value" class="form-control tableTextArea value01"></textarea></td>' +
                    '<td><button type="button" id="btnDelete" class="deleteLair btn btn btn-danger btn-xs">Remove</button></td>' +
                    '<td><input type="hidden" name="LairActions.Index" value="' + rowCount + '" /><td>' + '</tr>';
                $('#lairTable').append(lairTable);
            });
            $(document).on("click", ".deleteLair", function () {
                $(this).closest("tr").remove();
            });
        });
    </script>
}
