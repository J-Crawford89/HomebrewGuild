@model Models.MonsterModels.MonsterCreate

@{
    ViewBag.Title = "Create a Monster";
}

<div class="pageTitle monsterTitle">
    <h1>Create a Monster</h1>
</div>

<div class="container-md">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="container-md">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-row">
                <div class="form-group col-lg-8 col-md-10 col-sm-12 col-10 offset-lg-2 offset-md-1 offset-sm-0 offset-1">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "sr-only" })
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control inputLarge", placeholder = "Monster Name" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger inputStandard" })
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-lg-2 offset-md-1 offset-sm-0 offset-1">
                    @Html.LabelFor(model => model.Size, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EnumDropDownListFor(model => model.Size, "Select Size", new { @class = "form-control inputStandard" })
                    @Html.ValidationMessageFor(model => model.Size, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-1 offset-sm-0">
                    @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EnumDropDownListFor(model => model.Type, "Select Type", new { @class = "form-control inputStandard" })
                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-lg-2 offset-md-1 offset-sm-0 offset-1">
                    @Html.LabelFor(model => model.Speed, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.Speed, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "Speed" } })
                    @Html.ValidationMessageFor(model => model.Speed, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-1 offset-sm-0">
                    @Html.LabelFor(model => model.Alignment, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EnumDropDownListFor(model => model.Alignment, "Select Alignment", new { @class = "form-control inputStandard" })
                    @Html.ValidationMessageFor(model => model.Alignment, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-lg-2 offset-md-1 offset-sm-0 offset-1">
                    @Html.LabelFor(model => model.ArmorClass, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.ArmorClass, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "Armor Class", @value = "null !important" } })
                    @Html.ValidationMessageFor(model => model.ArmorClass, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-1 offset-sm-0">
                    @Html.LabelFor(model => model.ArmorType, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.ArmorType, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "Armor Type" } })
                    @Html.ValidationMessageFor(model => model.ArmorType, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-lg-2 offset-md-1 offset-sm-0 offset-1">
                    @Html.LabelFor(model => model.HitPoints, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.HitPoints, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "Hit Points" } })
                    @Html.ValidationMessageFor(model => model.HitPoints, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-1 offset-sm-0">
                    @Html.LabelFor(model => model.HitPointEquation, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.HitPointEquation, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "Hit Point Equation" } })
                    @Html.ValidationMessageFor(model => model.HitPointEquation, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-5 col-sm-4 col-md-2 offset-md-3 offset-1 offset-sm-0">
                    @Html.LabelFor(model => model.Strength, "STR", htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.Strength, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "STR" } })
                    @Html.ValidationMessageFor(model => model.Strength, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-5 col-sm-4 col-md-2">
                    @Html.LabelFor(model => model.Dexterity, "DEX", htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.Dexterity, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "DEX" } })
                    @Html.ValidationMessageFor(model => model.Dexterity, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-5 col-sm-4 col-md-2 offset-1 offset-sm-0">
                    @Html.LabelFor(model => model.Constitution, "CON", htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.Constitution, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "CON" } })
                    @Html.ValidationMessageFor(model => model.Constitution, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-5 col-sm-4 col-md-2 offset-md-3">
                    @Html.LabelFor(model => model.Intelligence, "INT", htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.Intelligence, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "INT" } })
                    @Html.ValidationMessageFor(model => model.Intelligence, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-5 col-sm-4 col-md-2 offset-1 offset-sm-0">
                    @Html.LabelFor(model => model.Wisdom, "WIS", htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.Wisdom, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "WIS" } })
                    @Html.ValidationMessageFor(model => model.Wisdom, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-5 col-sm-4 col-md-2">
                    @Html.LabelFor(model => model.Charisma, "CHA", htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.Charisma, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "CHA" } })
                    @Html.ValidationMessageFor(model => model.Charisma, "", new { @class = "text-danger" })
                </div>
            </div>

            <!--SAVING THROWS - Dictionary<Ability, string> -->
            <div class="form-row">
                <div class="form-group col-10 offset-1 col-sm-12 offset-sm-0 col-md-5 col-lg-3 offset-lg-2 tableForm">
                    <h5>@Html.LabelFor(model => model.SavingThrows, htmlAttributes: new { @class = "tableHeader" })</h5>
                    <table class="checkbox table-sm">
                        <thead>
                            <tr>
                                <th></th>
                                <th>Ability</th>
                                <th>Bonus</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                foreach (var ability in Enum.GetNames(typeof(Data.Enums.Ability)))
                                {
                                    var kvp = new KeyValuePair<Data.Enums.Ability, string>();
                                    Guid index = Guid.NewGuid();
                                    <tr>
                                        <td>
                                            <input type="checkbox" name="SavingThrows[@index].Key" value="@ability" />
                                        </td>
                                        <td>@ability</td>
                                        <td>
                                            <input class="form-control" type="text" name="SavingThrows[@index].Value" value="@kvp.Value" />
                                        </td>
                                        <td><input type="hidden" name="SavingThrows.Index" value="@index" /></td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>

                <!--SKILLS - Dictionary<Skill, string> -->
                <div class="form-group col-10 offset-1 col-sm-12 offset-sm-0 col-md-7 tableForm">
                    <h5>@Html.LabelFor(model => model.Skills, htmlAttributes: new { @class = "tableHeader" })</h5>
                    <table class="checkbox table-sm table-responsive-sm">
                        <thead>
                            <tr>
                                <th></th>
                                <th>Skill</th>
                                <th>Bonus</th>
                                <th></th>
                                <th></th>
                                <th>Skill</th>
                                <th>Bonus</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                var firstColumn = new List<Data.Enums.Skill>();
                                var secondColumn = new List<Data.Enums.Skill>();
                                var counter = 0;
                                foreach (Data.Enums.Skill skill in (Data.Enums.Skill[])Enum.GetValues(typeof(Data.Enums.Skill)))
                                {
                                    counter++;
                                    if (counter % 2 == 0)
                                    {
                                        secondColumn.Add(skill);
                                    }
                                    else if (counter % 2 != 0)
                                    {
                                        firstColumn.Add(skill);
                                    }
                                }
                                for (int i = 0; i < firstColumn.Count(); i++)
                                {
                                    var enumService = new Services.EnumService();
                                    var firstColumnSkill = firstColumn[i];
                                    var indexA = Guid.NewGuid();
                                    var indexB = Guid.NewGuid();
                                    var secondColumnSkill = secondColumn[i];
                                    var kvpA = new KeyValuePair<Data.Enums.Skill, string>();
                                    var kvpB = new KeyValuePair<Data.Enums.Skill, string>();
                                    <tr>
                                        <td>
                                            <input type="checkbox" name="Skills[@indexA].Key" value="@firstColumnSkill.ToString()" />
                                        </td>
                                        <td>@enumService.ConvertSkill(firstColumnSkill)</td>
                                        <td>
                                            <input type="text" class="form-control inputSmall" name="Skills[@indexA].Value" />
                                        </td>
                                        <td><input type="hidden" class="form-control" name="Skills.Index" value="@indexA" /></td>
                                        @if (secondColumnSkill != null)
                                        {
                                            <td>
                                                <input type="checkbox" name="Skills[@indexB].Key" value="@secondColumnSkill.ToString()" />
                                            </td>
                                            <td>@enumService.ConvertSkill(secondColumnSkill)</td>
                                            <td>
                                                <input type="text" class="form-control inputSmall" name="Skills[@indexB].Value" />
                                            </td>
                                            <td><input type="hidden" name="Skills.Index" value="@indexB" /></td>
                                        }
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-lg-2 offset-md-1 offset-sm-0 offset-1">
                    @Html.LabelFor(model => model.Vulnerabilities, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.Vulnerabilities, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "Vulnerabilities" } })
                    @Html.ValidationMessageFor(model => model.Vulnerabilities, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-1 offset-sm-0">
                    @Html.LabelFor(model => model.Resistances, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.Resistances, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "Resistances" } })
                    @Html.ValidationMessageFor(model => model.Resistances, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-lg-2 offset-md-1 offset-sm-0 offset-1">
                    @Html.LabelFor(model => model.Immunities, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.Immunities, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "Immunities" } })
                    @Html.ValidationMessageFor(model => model.Immunities, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-1 offset-sm-0">
                    @Html.LabelFor(model => model.Senses, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.Senses, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "Senses" } })
                    @Html.ValidationMessageFor(model => model.Senses, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-lg-2 offset-md-1 offset-sm-0 offset-1">
                    @Html.LabelFor(model => model.Languages, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.Languages, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "Languages" } })
                    @Html.ValidationMessageFor(model => model.Languages, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-lg-4 col-md-5 col-sm-6 col-10 offset-1 offset-sm-0">
                    @Html.LabelFor(model => model.ChallengeRating, htmlAttributes: new { @class = "labelStandard" })
                    @Html.EditorFor(model => model.ChallengeRating, new { htmlAttributes = new { @class = "form-control inputStandard", @placeholder = "Challenge Rating" } })
                    @Html.ValidationMessageFor(model => model.ChallengeRating, "", new { @class = "text-danger" })
                </div>
            </div>


            <!--TRAITS-->
            <div class="form-row tableForm">
                <div class="form-group col-10 offset-1 col-sm-12 offset-sm-0 col-md-10 offset-md-1 col-lg-8 offset-lg-2">
                    <h5>Traits</h5>
                    <table class="table" id="traitTable">
                        <thead>
                            <tr>
                                <th>Trait Name</th>
                                <th>Trait Description</th>
                                <th>
                                    <button type="button" id="btnAdd" class="btn btn-sm btn-primary addTrait"><i class="fas fa-plus"></i></button>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="traitRow">
                                <td><input type="text" name="Traits[0].Key" class="form-control key01" /></td>
                                <td><textarea name="Traits[0].Value" class="form-control tableTextArea value01"></textarea></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!--ACTIONS-->
            <div class="form-row tableForm">
                <div class="form-group col-10 offset-1 col-sm-12 offset-sm-0 col-md-10 offset-md-1 col-lg-8 offset-lg-2">
                    <h5>Actions</h5>
                    <table class="table" id="actionTable">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                                <th>
                                    <button type="button" id="btnAdd" class="btn btn-sm btn-primary addAction"><i class="fas fa-plus"></i></button>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="actionRow">
                                <td><input type="text" name="Actions[0].Key" class="form-control key01" /></td>
                                <td><textarea name="Actions[0].Value" class="form-control tableTextArea value01"></textarea></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!--REACTIONS-->
            <div class="form-row tableForm">
                <div class="form-group col-10 offset-1 col-sm-12 offset-sm-0 col-md-10 offset-md-1 col-lg-8 offset-lg-2">
                    <h5>Reactions</h5>
                    <table class="table" id="reactionTable">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                                <th>
                                    <button type="button" id="btnAdd" class="btn btn-sm btn-primary addReaction"><i class="fas fa-plus"></i></button>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="reactionRow">
                                <td><input type="text" name="Reactions[0].Key" class="form-control key01" /></td>
                                <td><textarea name="Reactions[0].Value" class="form-control tableTextArea value01"></textarea></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!--LEGENDARY-->
            <div class="form-row tableForm">
                <div class="form-group col-10 offset-1 col-sm-12 offset-sm-0 col-md-10 offset-md-1 col-lg-8 offset-lg-2">
                    @Html.EditorFor(model => model.NumberOfLegendaryActions, new { htmlAttributes = new { @class = "form-control float-right", @id = "legendaryActions", @placeholder = "#/Round" } })
                    @Html.ValidationMessageFor(model => model.NumberOfLegendaryActions, "", new { @class = "text-danger" })
                    <h5>
                        Legendary Actions
                    </h5>
                    <table class="table" id="legendaryTable">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                                <th>
                                    <button type="button" id="btnAdd" class="btn btn-sm btn-primary addLegendary"><i class="fas fa-plus"></i></button>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="legendaryRow">
                                <td><input type="text" name="LegendaryActions[0].Key" class="form-control key01" /></td>
                                <td><textarea name="LegendaryActions[0].Value" class="form-control tableTextArea value01"></textarea></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!--LAIR-->
            <div class="form-row tableForm">
                <div class="form-group col-10 offset-1 col-sm-12 offset-sm-0 col-md-10 offset-md-1 col-lg-8 offset-lg-2">
                    <h5>Lair Actions</h5>
                    <table class="table" id="lairTable">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                                <th>
                                    <button type="button" id="btnAdd" class="btn btn-sm btn-primary addLair"><i class="fas fa-plus"></i></button>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="lairRow">
                                <td><input type="text" name="LairActions[0].Key" class="form-control key01" /></td>
                                <td><textarea name="LairActions[0].Value" class="form-control tableTextArea value01"></textarea></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="formButtonsContainer row">
                <div class="col-11 col-lg-10 col-sm-12 col-md-11">
                    <div class="formButtons">
                        <ul class="horizontalList">
                            <li><button type="button" class="btn btn-cancel">@Html.ActionLink("Cancel", "Index", "UserMonster", new { onclick = "return confirm('Are you sure you would like to cancel changes and return?')" })</button></li>
                            <li><input type="submit" value="Create" class="btn btn-primary" /></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

    }
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(document).ready(function () {
            $(document).on("click", ".addTrait", function () {
                var rowCount = $('.traitRow').length;
                var traitTable = '<tr class="traitRow">' + '<td><input type="text" name="Traits[' + rowCount + '].Key" class="form-control key01" /></td>' +
                    '<td><textarea name="Traits[' + rowCount + '].Value" class="form-control tableTextArea value01"></textarea></td>' +
                    '<td><button type="button" id="btnDelete" class="deleteTrait btn btn btn-danger btn-sm"><i class="fas fa-minus"></i></button></td>' +
                    '</tr>';
                $('#traitTable').append(traitTable);
            });
            $(document).on("click", ".deleteTrait", function () {
                $(this).closest("tr").remove();
            });
            $(document).on("click", ".addAction", function () {
                var rowCount = $('.actionRow').length;
                var actionTable = '<tr class="actionRow">' + '<td><input type="text" name="Actions[' + rowCount + '].Key" class="form-control key01" /></td>' +
                    '<td><textarea name="Actions[' + rowCount + '].Value" class="form-control tableTextArea value01"></textarea></td>' +
                    '<td><button type="button" id="btnDelete" class="deleteAction btn btn btn-danger btn-sm"><i class="fas fa-minus"></i></button></td>' +
                    '</tr>';
                $('#actionTable').append(actionTable);
            });
            $(document).on("click", ".deleteAction", function () {
                $(this).closest("tr").remove();
            });
            $(document).on("click", ".addReaction", function () {
                var rowCount = $('.reactionRow').length;
                var reactionTable = '<tr class="reactionRow">' + '<td><input type="text" name="Reactions[' + rowCount + '].Key" class="form-control key01" /></td>' +
                    '<td><textarea name="Reactions[' + rowCount + '].Value" class="form-control tableTextArea value01"></textarea></td>' +
                    '<td><button type="button" id="btnDelete" class="deleteReaction btn btn btn-danger btn-sm"><i class="fas fa-minus"></i></button></td>' +
                    '</tr>';
                $('#reactionTable').append(reactionTable);
            });
            $(document).on("click", ".deleteReaction", function () {
                $(this).closest("tr").remove();
            });
            $(document).on("click", ".addLegendary", function () {
                var rowCount = $('.legendaryRow').length;
                var legendaryTable = '<tr class="legendaryRow">' + '<td><input type="text" name="LegendaryActions[' + rowCount + '].Key" class="form-control key01" /></td>' +
                    '<td><textarea name="LegendaryActions[' + rowCount + '].Value" class="form-control tableTextArea value01"></textarea></td>' +
                    '<td><button type="button" id="btnDelete" class="deleteLegendary btn btn btn-danger btn-sm"><i class="fas fa-minus"></i></button></td>' +
                    '</tr>';
                $('#legendaryTable').append(legendaryTable);
            });
            $(document).on("click", ".deleteLegendary", function () {
                $(this).closest("tr").remove();
            });
            $(document).on("click", ".addLair", function () {
                var rowCount = $('.lairRow').length;
                var lairTable = '<tr class="lairRow">' + '<td><input type="text" name="LairActions[' + rowCount + '].Key" class="form-control key01" /></td>' +
                    '<td><textarea name="LairActions[' + rowCount + '].Value" class="form-control tableTextArea value01"></textarea></td>' +
                    '<td><button type="button" id="btnDelete" class="deleteLair btn btn btn-danger btn-sm"><i class="fas fa-minus"></i></button></td>' +
                    '</tr>';
                $('#lairTable').append(lairTable);
            });
            $(document).on("click", ".deleteLair", function () {
                $(this).closest("tr").remove();
            });
        });
    </script>
}